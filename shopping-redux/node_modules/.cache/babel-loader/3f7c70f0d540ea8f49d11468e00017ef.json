{"ast":null,"code":"import { compose, legacy_createStore as createStore, applyMiddleware } from 'redux';\nimport logger from 'redux-logger';\nimport { rootSaga } from './root-saga';\nimport { rootReducer } from './root-reducer';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage'; // import thunk from 'redux-thunk'\n\nimport createSagaMiddleware from 'redux-saga'; //root-reducer\n\nconst persistConfig = {\n  key: 'root',\n  // 开始的入口层\n  storage,\n  whitelist: ['cart'] //可能产生冲突\n\n};\nconst sagaMiddleware = createSagaMiddleware();\nconst persistedReducer = persistReducer(persistConfig, rootReducer); // 如果想用自己建的中间件就import middleware，用[loggerMiddleware]\n// 调节当生产的时候才打印中间的log\n\nconst middleWares = [process.env.NODE_ENV !== 'production' && logger, sagaMiddleware].filter(Boolean);\nconst composeEnhancer = process.env.NODE_ENV !== 'production' && window && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst composedEnhancers = composeEnhancer(applyMiddleware(...middleWares));\nexport const store = createStore(persistedReducer, undefined, composedEnhancers);\ncreateSagaMiddleware.run(rootSaga);\nexport const persistor = persistStore(store);","map":{"version":3,"names":["compose","legacy_createStore","createStore","applyMiddleware","logger","rootSaga","rootReducer","persistStore","persistReducer","storage","createSagaMiddleware","persistConfig","key","whitelist","sagaMiddleware","persistedReducer","middleWares","process","env","NODE_ENV","filter","Boolean","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","composedEnhancers","store","undefined","run","persistor"],"sources":["/home/axun/React/shopping/src/store/store.js"],"sourcesContent":["import { compose, legacy_createStore as createStore, applyMiddleware} from 'redux'\nimport logger from 'redux-logger'\nimport { rootSaga } from './root-saga'\nimport { rootReducer } from './root-reducer'\nimport { persistStore, persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\n// import thunk from 'redux-thunk'\nimport createSagaMiddleware from 'redux-saga'\n\n//root-reducer\n\nconst persistConfig = {\n    key: 'root', // 开始的入口层\n    storage,\n    whitelist: ['cart'] //可能产生冲突\n}\n\nconst sagaMiddleware = createSagaMiddleware()\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\n\n// 如果想用自己建的中间件就import middleware，用[loggerMiddleware]\n// 调节当生产的时候才打印中间的log\nconst middleWares = [\n    process.env.NODE_ENV !== 'production' && logger,\n    sagaMiddleware,\n].filter(Boolean)\n\nconst composeEnhancer =\n  (process.env.NODE_ENV !== 'production' &&\n    window &&\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) ||\n  compose;\n\nconst composedEnhancers = composeEnhancer(applyMiddleware(...middleWares))\nexport const store  = createStore(persistedReducer, undefined, composedEnhancers)\n\ncreateSagaMiddleware.run(rootSaga)\n\nexport const persistor = persistStore(store)"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,kBAAkB,IAAIC,WAAxC,EAAqDC,eAArD,QAA2E,OAA3E;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,SAASC,YAAT,EAAuBC,cAAvB,QAA6C,eAA7C;AACA,OAAOC,OAAP,MAAoB,2BAApB,C,CACA;;AACA,OAAOC,oBAAP,MAAiC,YAAjC,C,CAEA;;AAEA,MAAMC,aAAa,GAAG;EAClBC,GAAG,EAAE,MADa;EACL;EACbH,OAFkB;EAGlBI,SAAS,EAAE,CAAC,MAAD,CAHO,CAGE;;AAHF,CAAtB;AAMA,MAAMC,cAAc,GAAGJ,oBAAoB,EAA3C;AAEA,MAAMK,gBAAgB,GAAGP,cAAc,CAACG,aAAD,EAAgBL,WAAhB,CAAvC,C,CAEA;AACA;;AACA,MAAMU,WAAW,GAAG,CAChBC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IAAyCf,MADzB,EAEhBU,cAFgB,EAGlBM,MAHkB,CAGXC,OAHW,CAApB;AAKA,MAAMC,eAAe,GAClBL,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IACCI,MADD,IAECA,MAAM,CAACC,oCAFT,IAGAxB,OAJF;AAMA,MAAMyB,iBAAiB,GAAGH,eAAe,CAACnB,eAAe,CAAC,GAAGa,WAAJ,CAAhB,CAAzC;AACA,OAAO,MAAMU,KAAK,GAAIxB,WAAW,CAACa,gBAAD,EAAmBY,SAAnB,EAA8BF,iBAA9B,CAA1B;AAEPf,oBAAoB,CAACkB,GAArB,CAAyBvB,QAAzB;AAEA,OAAO,MAAMwB,SAAS,GAAGtB,YAAY,CAACmB,KAAD,CAA9B"},"metadata":{},"sourceType":"module"}