{"ast":null,"code":"var _jsxFileName = \"/home/axun/React/shopping/src/components/payment-form/payment-form.component.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectCartTotal } from '../../store/cart/cart.selector';\nimport { selectCurrentUser } from '../../store/user/user.selector';\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\nimport Button, { BUTTON_TYPE_CLASSES } from '../button/button.component';\nimport { PaymentFormContainer, FormContainer } from './payment-form.styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PaymentForm = () => {\n  _s();\n\n  const stripe = useStripe();\n  const elements = useElements();\n  const amount = useSelector(selectCartTotal);\n  const currentUser = useSelector(selectCurrentUser);\n  const [isProcessingPayment, setIsProcessingPayment] = useState(false);\n\n  const paymentHandler = async e => {\n    e.preventDefault();\n\n    if (!stripe || !elements) {\n      return;\n    }\n\n    setIsProcessingPayment(true);\n    const response = await fetch('/.netlify/functions/create-payment-intent', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        amount: amount * 100\n      })\n    }).then(res => res.json());\n    const {\n      paymentIntent: {\n        client_secret\n      }\n    } = response;\n    const paymentResult = await stripe.confirmCardPayment(client_secret, {\n      payment_method: {\n        card: elements.getElement(CardElement),\n        billing_detail: {\n          name: currentUser ? currentUser.displayName : 'guest'\n        }\n      }\n    });\n    setIsProcessingPayment(false);\n\n    if (paymentResult.error) {\n      alert(paymentResult.error);\n    } else {\n      if (paymentResult.paymentIntent.status === 'succeeded') {\n        alert('Payment Successful');\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(PaymentFormContainer, {\n    children: /*#__PURE__*/_jsxDEV(FormContainer, {\n      onSubmit: paymentHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Credit Card Payment: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CardElement, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        disabled: isProcessingPayment,\n        buttonType: BUTTON_TYPE_CLASSES.inverted,\n        children: \" Pay now\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n};\n\n_s(PaymentForm, \"zeZvNGpoSXJVIJ/CUzfiu8Kc5to=\", false, function () {\n  return [useStripe, useElements, useSelector, useSelector];\n});\n\n_c = PaymentForm;\nexport default PaymentForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"PaymentForm\");","map":{"version":3,"names":["useState","useSelector","selectCartTotal","selectCurrentUser","CardElement","useStripe","useElements","Button","BUTTON_TYPE_CLASSES","PaymentFormContainer","FormContainer","PaymentForm","stripe","elements","amount","currentUser","isProcessingPayment","setIsProcessingPayment","paymentHandler","e","preventDefault","response","fetch","method","headers","body","JSON","stringify","then","res","json","paymentIntent","client_secret","paymentResult","confirmCardPayment","payment_method","card","getElement","billing_detail","name","displayName","error","alert","status","inverted"],"sources":["/home/axun/React/shopping/src/components/payment-form/payment-form.component.jsx"],"sourcesContent":["import { useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport { selectCartTotal } from '../../store/cart/cart.selector'\nimport { selectCurrentUser } from '../../store/user/user.selector'\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js'\nimport Button, { BUTTON_TYPE_CLASSES } from '../button/button.component'\nimport { PaymentFormContainer, FormContainer } from './payment-form.styles'\n\nconst PaymentForm = () => {\n    const stripe = useStripe()\n    const elements = useElements()\n    const amount = useSelector(selectCartTotal)\n    const currentUser = useSelector(selectCurrentUser)\n    const [isProcessingPayment, setIsProcessingPayment] = useState(false)\n\n    const paymentHandler = async (e) => {\n        e.preventDefault()\n        if (!stripe || !elements) {\n            return\n        }\n\n        setIsProcessingPayment(true)\n\n        const response = await fetch('/.netlify/functions/create-payment-intent', {\n            method: 'post',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ amount: amount * 100 })\n        }).then(res => res.json())\n\n        const { paymentIntent: { client_secret }} = response \n\n        const paymentResult = await stripe.confirmCardPayment(client_secret, {\n            payment_method: {\n                card: elements.getElement(CardElement),\n                billing_detail: {\n                    name: currentUser ? currentUser.displayName: 'guest',\n                },\n            }\n        })\n\n        setIsProcessingPayment(false)\n\n        if (paymentResult.error) {\n            alert(paymentResult.error)\n        } else {\n            if (paymentResult.paymentIntent.status === 'succeeded') {\n                alert('Payment Successful')\n            }\n        }\n    }\n\n    return (\n        <PaymentFormContainer>\n            <FormContainer onSubmit={paymentHandler}>\n                <h2>Credit Card Payment: </h2>\n                <CardElement />\n                <Button \n                    disabled={isProcessingPayment}\n                    buttonType={BUTTON_TYPE_CLASSES.inverted}\n                > Pay now</Button>\n            </FormContainer>\n        </PaymentFormContainer>\n    )\n}\n\nexport default PaymentForm"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,SAASC,WAAT,EAAsBC,SAAtB,EAAiCC,WAAjC,QAAoD,yBAApD;AACA,OAAOC,MAAP,IAAiBC,mBAAjB,QAA4C,4BAA5C;AACA,SAASC,oBAAT,EAA+BC,aAA/B,QAAoD,uBAApD;;;AAEA,MAAMC,WAAW,GAAG,MAAM;EAAA;;EACtB,MAAMC,MAAM,GAAGP,SAAS,EAAxB;EACA,MAAMQ,QAAQ,GAAGP,WAAW,EAA5B;EACA,MAAMQ,MAAM,GAAGb,WAAW,CAACC,eAAD,CAA1B;EACA,MAAMa,WAAW,GAAGd,WAAW,CAACE,iBAAD,CAA/B;EACA,MAAM,CAACa,mBAAD,EAAsBC,sBAAtB,IAAgDjB,QAAQ,CAAC,KAAD,CAA9D;;EAEA,MAAMkB,cAAc,GAAG,MAAOC,CAAP,IAAa;IAChCA,CAAC,CAACC,cAAF;;IACA,IAAI,CAACR,MAAD,IAAW,CAACC,QAAhB,EAA0B;MACtB;IACH;;IAEDI,sBAAsB,CAAC,IAAD,CAAtB;IAEA,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,2CAAD,EAA8C;MACtEC,MAAM,EAAE,MAD8D;MAEtEC,OAAO,EAAE;QACL,gBAAgB;MADX,CAF6D;MAKtEC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;QAAEb,MAAM,EAAEA,MAAM,GAAG;MAAnB,CAAf;IALgE,CAA9C,CAAL,CAMpBc,IANoB,CAMfC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EANQ,CAAvB;IAQA,MAAM;MAAEC,aAAa,EAAE;QAAEC;MAAF;IAAjB,IAAsCX,QAA5C;IAEA,MAAMY,aAAa,GAAG,MAAMrB,MAAM,CAACsB,kBAAP,CAA0BF,aAA1B,EAAyC;MACjEG,cAAc,EAAE;QACZC,IAAI,EAAEvB,QAAQ,CAACwB,UAAT,CAAoBjC,WAApB,CADM;QAEZkC,cAAc,EAAE;UACZC,IAAI,EAAExB,WAAW,GAAGA,WAAW,CAACyB,WAAf,GAA4B;QADjC;MAFJ;IADiD,CAAzC,CAA5B;IASAvB,sBAAsB,CAAC,KAAD,CAAtB;;IAEA,IAAIgB,aAAa,CAACQ,KAAlB,EAAyB;MACrBC,KAAK,CAACT,aAAa,CAACQ,KAAf,CAAL;IACH,CAFD,MAEO;MACH,IAAIR,aAAa,CAACF,aAAd,CAA4BY,MAA5B,KAAuC,WAA3C,EAAwD;QACpDD,KAAK,CAAC,oBAAD,CAAL;MACH;IACJ;EACJ,CApCD;;EAsCA,oBACI,QAAC,oBAAD;IAAA,uBACI,QAAC,aAAD;MAAe,QAAQ,EAAExB,cAAzB;MAAA,wBACI;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADJ,eAEI,QAAC,WAAD;QAAA;QAAA;QAAA;MAAA,QAFJ,eAGI,QAAC,MAAD;QACI,QAAQ,EAAEF,mBADd;QAEI,UAAU,EAAER,mBAAmB,CAACoC,QAFpC;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAHJ;IAAA;MAAA;MAAA;MAAA;IAAA;EADJ;IAAA;IAAA;IAAA;EAAA,QADJ;AAYH,CAzDD;;GAAMjC,W;UACaN,S,EACEC,W,EACFL,W,EACKA,W;;;KAJlBU,W;AA2DN,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}