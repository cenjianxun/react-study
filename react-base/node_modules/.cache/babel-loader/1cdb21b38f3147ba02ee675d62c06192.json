{"ast":null,"code":"var _jsxFileName = \"/home/axun/React/monsters-rolodex/src/App.js\";\nimport { Component } from 'react'; //import logo from './logo.svg';\n\nimport './App.css'; // class App extends Component {\n//   constructor(){\n//     super();\n//     this.state = {\n//       name: {fname:'Nima', lname:'xi'},\n//       company: 'ztm',\n//     };\n//   }\n//   render() {\n//     return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>Hi {this.state.name.fname} {this.state.name.lname}, I work at {this.state.company}</p>\n//         <button\n//           // 这样传递的值是异步的，所以当button被click之后，log里的值有可能还未被更新\n//           // onClick={()=>{\n//           //   this.setState({name: {fname:'cuicui',lname:'si'}})  // shallow merge 浅合并\n//           //   console.log(this.state) // 在浏览器的console里打一个log\n//           //}\n//           onClick={() => {\n//             this.setState(\n//               () => {\n//                 return {name: {fname:'cuicui',lname:'si'}};\n//               },\n//               () => { // 回调函数[可选]，只有当前一个值更新了才会调用这里\n//                 console.log(this.state);\n//               }\n//             );\n//           }\n//           }\n//         >\n//           change name</button>\n//       </header>\n//     </div>\n//     );\n//   }\n// }\n// export default App;\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  // 运行顺序：构造函数永远第一，构造函数：初始化对象\n  // 2. render 组件初始UI\n  // 3. 需要api时，就call 在mount lifecycle的组件\n  // 2. 一旦setState 被call，就rerender2\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: ''\n    };\n  } // lifecycle methods 一旦拿到数据就尽快渲染\n\n\n  componentDidMount() {\n    // 异步\n    fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json()).then(users => this.setState(() => {\n      return {\n        monsters: users\n      };\n    }, () => {\n      console.log(this.state);\n    }));\n  }\n\n  render() {\n    const filteredMonsters = this.state.monsters.filter(monster => {\n      return monster.name.toLocaleLowerCase().includes(this.state.searchField);\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"ssearch-box\",\n        type: \"search\",\n        placeholder: \"search monsters\",\n        onChange: event => {\n          console.log(event.target.value); //const searchString = event.target.value.toLocaleLowerCase();\n\n          const searchField = event.target.value.toLocaleLowerCase(); // filter like map, is a list,每个元素从左到右开始回调。返回一个新list\n          // const filteredMonsters = this.state.monsters.filter((monster) => {\n          //   return monster.name.toLocaleLowerCase().includes(searchString);\n          // });\n\n          this.setState(() => {\n            // return { monsters:filteredMonsters};\n            return {\n              searchField\n            };\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), filteredMonsters.map(qiqi => {\n        //{this.state.monsters.map((qiqi) => { //一个数组循环 .map 返回\n        return (\n          /*#__PURE__*/\n          // key的作用是，rerender的时候，精准地找到该值局部重渲染\n          _jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"h1\", {\n              children: qiqi.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 17\n            }, this)\n          }, qiqi.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 15\n          }, this)\n        ); // 这里传入的key必须是unique\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"names":["Component","App","constructor","state","monsters","searchField","componentDidMount","fetch","then","response","json","users","setState","console","log","render","filteredMonsters","filter","monster","name","toLocaleLowerCase","includes","event","target","value","map","qiqi","id"],"sources":["/home/axun/React/monsters-rolodex/src/App.js"],"sourcesContent":["import { Component } from 'react';\n//import logo from './logo.svg';\nimport './App.css';\n\n// class App extends Component {\n//   constructor(){\n//     super();\n//     this.state = {\n//       name: {fname:'Nima', lname:'xi'},\n//       company: 'ztm',\n//     };\n//   }\n//   render() {\n//     return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>Hi {this.state.name.fname} {this.state.name.lname}, I work at {this.state.company}</p>\n//         <button\n//           // 这样传递的值是异步的，所以当button被click之后，log里的值有可能还未被更新\n//           // onClick={()=>{\n//           //   this.setState({name: {fname:'cuicui',lname:'si'}})  // shallow merge 浅合并\n//           //   console.log(this.state) // 在浏览器的console里打一个log\n//           //}\n//           onClick={() => {\n//             this.setState(\n//               () => {\n//                 return {name: {fname:'cuicui',lname:'si'}};\n//               },\n//               () => { // 回调函数[可选]，只有当前一个值更新了才会调用这里\n//                 console.log(this.state);\n//               }\n//             );\n//           }\n//           }\n//         >\n//           change name</button>\n//       </header>\n//     </div>\n//     );\n//   }\n// }\n// export default App;\n\nclass App extends Component {\n// 运行顺序：构造函数永远第一，构造函数：初始化对象\n// 2. render 组件初始UI\n// 3. 需要api时，就call 在mount lifecycle的组件\n// 2. 一旦setState 被call，就rerender2\n  constructor(){\n    super();\n    this.state = {\n      monsters: [],\n      searchField: '',\n    };\n  }\n\n  // lifecycle methods 一旦拿到数据就尽快渲染\n  componentDidMount() { // 异步\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then((response) => response.json())\n      .then((users) => \n        this.setState(\n          () => { return { monsters: users}; \n          },\n          () => {console.log(this.state);}\n        )\n      );\n  }\n\n  render() {\n    const filteredMonsters = this.state.monsters.filter((monster) => {\n      return monster.name.toLocaleLowerCase().includes(this.state.searchField);\n    });\n    return (\n      <div className=\"App\">\n        <input \n          className='ssearch-box' \n          type='search' \n          placeholder='search monsters' \n          onChange={(event) => {\n            console.log(event.target.value);\n            //const searchString = event.target.value.toLocaleLowerCase();\n            const searchField = event.target.value.toLocaleLowerCase();\n            // filter like map, is a list,每个元素从左到右开始回调。返回一个新list\n            // const filteredMonsters = this.state.monsters.filter((monster) => {\n            //   return monster.name.toLocaleLowerCase().includes(searchString);\n            // });\n            this.setState(() => {\n              // return { monsters:filteredMonsters};\n              return { searchField};\n            })\n          }}/>\n          {filteredMonsters.map((qiqi) => {\n          //{this.state.monsters.map((qiqi) => { //一个数组循环 .map 返回\n            return ( // key的作用是，rerender的时候，精准地找到该值局部重渲染\n              <div key={qiqi.id}> \n                <h1>{qiqi.name}</h1>\n              </div>\n              ); // 这里传入的key必须是unique\n            })\n          }\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n"],"mappings":";AAAA,SAASA,SAAT,QAA0B,OAA1B,C,CACA;;AACA,OAAO,WAAP,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAEA,MAAMC,GAAN,SAAkBD,SAAlB,CAA4B;EAC5B;EACA;EACA;EACA;EACEE,WAAW,GAAE;IACX;IACA,KAAKC,KAAL,GAAa;MACXC,QAAQ,EAAE,EADC;MAEXC,WAAW,EAAE;IAFF,CAAb;EAID,CAXyB,CAa1B;;;EACAC,iBAAiB,GAAG;IAAE;IACpBC,KAAK,CAAC,4CAAD,CAAL,CACGC,IADH,CACSC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADtB,EAEGF,IAFH,CAESG,KAAD,IACJ,KAAKC,QAAL,CACE,MAAM;MAAE,OAAO;QAAER,QAAQ,EAAEO;MAAZ,CAAP;IACP,CAFH,EAGE,MAAM;MAACE,OAAO,CAACC,GAAR,CAAY,KAAKX,KAAjB;IAAyB,CAHlC,CAHJ;EASD;;EAEDY,MAAM,GAAG;IACP,MAAMC,gBAAgB,GAAG,KAAKb,KAAL,CAAWC,QAAX,CAAoBa,MAApB,CAA4BC,OAAD,IAAa;MAC/D,OAAOA,OAAO,CAACC,IAAR,CAAaC,iBAAb,GAAiCC,QAAjC,CAA0C,KAAKlB,KAAL,CAAWE,WAArD,CAAP;IACD,CAFwB,CAAzB;IAGA,oBACE;MAAK,SAAS,EAAC,KAAf;MAAA,wBACE;QACE,SAAS,EAAC,aADZ;QAEE,IAAI,EAAC,QAFP;QAGE,WAAW,EAAC,iBAHd;QAIE,QAAQ,EAAGiB,KAAD,IAAW;UACnBT,OAAO,CAACC,GAAR,CAAYQ,KAAK,CAACC,MAAN,CAAaC,KAAzB,EADmB,CAEnB;;UACA,MAAMnB,WAAW,GAAGiB,KAAK,CAACC,MAAN,CAAaC,KAAb,CAAmBJ,iBAAnB,EAApB,CAHmB,CAInB;UACA;UACA;UACA;;UACA,KAAKR,QAAL,CAAc,MAAM;YAClB;YACA,OAAO;cAAEP;YAAF,CAAP;UACD,CAHD;QAID;MAhBH;QAAA;QAAA;QAAA;MAAA,QADF,EAkBKW,gBAAgB,CAACS,GAAjB,CAAsBC,IAAD,IAAU;QAChC;QACE;UAAA;UAAS;UACP;YAAA,uBACE;cAAA,UAAKA,IAAI,CAACP;YAAV;cAAA;cAAA;cAAA;YAAA;UADF,GAAUO,IAAI,CAACC,EAAf;YAAA;YAAA;YAAA;UAAA;QADF,EAF8B,CAMzB;MACJ,CAPF,CAlBL;IAAA;MAAA;MAAA;MAAA;IAAA,QADF;EA8BD;;AA5DyB;;AA+D5B,eAAe1B,GAAf"},"metadata":{},"sourceType":"module"}