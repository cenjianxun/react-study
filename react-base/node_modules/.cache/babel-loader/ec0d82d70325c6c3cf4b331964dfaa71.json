{"ast":null,"code":"var _jsxFileName = \"/home/axun/React/monsters-rolodex/src/App.js\",\n    _s = $RefreshSig$();\n\nimport CardList from './components/card-list/card-list.component';\nimport SearchBox from './components/search-box/search-box.component';\nimport './App.css'; // function 方式\n\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [searchField, setSearchFiel] = useState(''); // 它存俩值 [value, setValue()]\n\n  const onSearchChange = event => {\n    const searchField = event.target.value.toLocaleLowerCase();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"app-title\",\n      children: \"Monsters Rolodex\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchBox, {\n      className: \"monsters-search-box\",\n      onChangeHandler: onSearchChange,\n      placeholder: \"search monsters\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n}; // class 方式\n// import { Component } from 'react';\n// class App extends Component {\n// // 运行顺序：构造函数永远第一，构造函数：初始化对象\n// // 2. render 组件初始UI\n// // 3. 需要api时，就call 在mount lifecycle的组件\n// // 2. 一旦setState 被call，就rerender2\n//   constructor(){\n//     super();\n//     this.state = {\n//       monsters: [],\n//       searchField: '',\n//     };\n//   }\n//   // lifecycle methods 一旦拿到数据就尽快渲染\n//   componentDidMount() { // 异步\n//     fetch('https://jsonplaceholder.typicode.com/users')\n//       .then((response) => response.json())\n//       .then((users) => \n//         this.setState(\n//           () => { return { monsters: users}; }\n//         )\n//       );\n//   }\n//   onSearchChange = (event) => { // 本来是匿名函数\n//     console.log(event.target.value);\n//     //const searchString = event.target.value.toLocaleLowerCase();\n//     const searchField = event.target.value.toLocaleLowerCase();\n//     // filter like map, is a list,每个元素从左到右开始回调。返回一个新list\n//     // const filteredMonsters = this.state.monsters.filter((monster) => {\n//     //   return monster.name.toLocaleLowerCase().includes(searchString);\n//     // });\n//     this.setState(() => {\n//       // return { monsters:filteredMonsters};\n//       return {searchField};\n//     })\n//   }\n//   render() {\n//     const { monsters, searchField } = this.state;\n//     const { onSearchChange } = this;\n//     const filteredMonsters = monsters.filter((monster) => {\n//       return monster.name.toLocaleLowerCase().includes(searchField);\n//     });\n//     return (\n//       <div className=\"App\">\n//         <h1 className='app-title'>Monsters Rolodex</h1>\n//         {/* <input \n//           className='ssearch-box' \n//           type='search' \n//           placeholder='search monsters' \n//           onChange={onSearchChange}/> */}\n//           {/* {filteredMonsters.map((qiqi) => {\n//           //{this.state.monsters.map((qiqi) => { //一个数组循环 .map 返回\n//             return ( // key的作用是，rerender的时候，精准地找到该值局部重渲染\n//               <div key={qiqi.id}> \n//                 <h1>{qiqi.name}</h1>\n//               </div>\n//               ); // 这里传入的key必须是unique\n//             })\n//           } */}\n//             <SearchBox\n//                 className='monsters-search-box'\n//                 onChangeHandler={onSearchChange} \n//                 placeholder='search monster'\n//             />\n//             <CardList monsters={filteredMonsters}/> \n//       </div>\n//     );\n//   }\n// }\n\n\n_s(App, \"YWM+cFkybLkZaokpSiYc4tzC3hE=\");\n\n_c = App;\nexport default App; /////////////////////////////////////////////////////////////////\n// class App extends Component {\n//   constructor(){\n//     super();\n//     this.state = {\n//       name: {fname:'Nima', lname:'xi'},\n//       company: 'ztm',\n//     };\n//   }\n//   render() {\n//     return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>Hi {this.state.name.fname} {this.state.name.lname}, I work at {this.state.company}</p>\n//         <button\n//           // 这样传递的值是异步的，所以当button被click之后，log里的值有可能还未被更新\n//           // onClick={()=>{\n//           //   this.setState({name: {fname:'cuicui',lname:'si'}})  // shallow merge 浅合并\n//           //   console.log(this.state) // 在浏览器的console里打一个log\n//           //}\n//           onClick={() => {\n//             this.setState(\n//               () => {\n//                 return {name: {fname:'cuicui',lname:'si'}};\n//               },\n//               () => { // 回调函数[可选]，只有当前一个值更新了才会调用这里\n//                 console.log(this.state);\n//               }\n//             );\n//           }\n//           }\n//         >\n//           change name</button>\n//       </header>\n//     </div>\n//     );\n//   }\n// }\n// export default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["CardList","SearchBox","useState","App","searchField","setSearchFiel","onSearchChange","event","target","value","toLocaleLowerCase"],"sources":["/home/axun/React/monsters-rolodex/src/App.js"],"sourcesContent":["\nimport CardList from './components/card-list/card-list.component';\nimport SearchBox from './components/search-box/search-box.component';\nimport './App.css';\n\n// function 方式\nimport { useState } from 'react';\n\nconst App = () => {\n  const [searchField, setSearchFiel] = useState(''); // 它存俩值 [value, setValue()]\n  const onSearchChange = (event) => {\n    const searchField = event.target.value.toLocaleLowerCase();\n  }\n  return (\n    <div className=\"App\">\n      <h1 className='app-title'>Monsters Rolodex</h1>\n      <SearchBox\n        className='monsters-search-box'\n        onChangeHandler={onSearchChange}\n        placeholder='search monsters'\n      />\n    </div>\n  )\n}\n\n// class 方式\n// import { Component } from 'react';\n\n// class App extends Component {\n// // 运行顺序：构造函数永远第一，构造函数：初始化对象\n// // 2. render 组件初始UI\n// // 3. 需要api时，就call 在mount lifecycle的组件\n// // 2. 一旦setState 被call，就rerender2\n//   constructor(){\n//     super();\n//     this.state = {\n//       monsters: [],\n//       searchField: '',\n//     };\n//   }\n\n//   // lifecycle methods 一旦拿到数据就尽快渲染\n//   componentDidMount() { // 异步\n//     fetch('https://jsonplaceholder.typicode.com/users')\n//       .then((response) => response.json())\n//       .then((users) => \n//         this.setState(\n//           () => { return { monsters: users}; }\n//         )\n//       );\n//   }\n\n//   onSearchChange = (event) => { // 本来是匿名函数\n//     console.log(event.target.value);\n//     //const searchString = event.target.value.toLocaleLowerCase();\n//     const searchField = event.target.value.toLocaleLowerCase();\n//     // filter like map, is a list,每个元素从左到右开始回调。返回一个新list\n//     // const filteredMonsters = this.state.monsters.filter((monster) => {\n//     //   return monster.name.toLocaleLowerCase().includes(searchString);\n//     // });\n//     this.setState(() => {\n//       // return { monsters:filteredMonsters};\n//       return {searchField};\n//     })\n//   }\n\n//   render() {\n//     const { monsters, searchField } = this.state;\n//     const { onSearchChange } = this;\n\n//     const filteredMonsters = monsters.filter((monster) => {\n//       return monster.name.toLocaleLowerCase().includes(searchField);\n//     });\n//     return (\n//       <div className=\"App\">\n//         <h1 className='app-title'>Monsters Rolodex</h1>\n//         {/* <input \n//           className='ssearch-box' \n//           type='search' \n//           placeholder='search monsters' \n//           onChange={onSearchChange}/> */}\n//           {/* {filteredMonsters.map((qiqi) => {\n//           //{this.state.monsters.map((qiqi) => { //一个数组循环 .map 返回\n//             return ( // key的作用是，rerender的时候，精准地找到该值局部重渲染\n//               <div key={qiqi.id}> \n//                 <h1>{qiqi.name}</h1>\n//               </div>\n//               ); // 这里传入的key必须是unique\n//             })\n//           } */}\n//             <SearchBox\n//                 className='monsters-search-box'\n//                 onChangeHandler={onSearchChange} \n//                 placeholder='search monster'\n//             />\n//             <CardList monsters={filteredMonsters}/> \n//       </div>\n//     );\n//   }\n// }\n\nexport default App;\n\n/////////////////////////////////////////////////////////////////\n// class App extends Component {\n//   constructor(){\n//     super();\n//     this.state = {\n//       name: {fname:'Nima', lname:'xi'},\n//       company: 'ztm',\n//     };\n//   }\n//   render() {\n//     return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>Hi {this.state.name.fname} {this.state.name.lname}, I work at {this.state.company}</p>\n//         <button\n//           // 这样传递的值是异步的，所以当button被click之后，log里的值有可能还未被更新\n//           // onClick={()=>{\n//           //   this.setState({name: {fname:'cuicui',lname:'si'}})  // shallow merge 浅合并\n//           //   console.log(this.state) // 在浏览器的console里打一个log\n//           //}\n//           onClick={() => {\n//             this.setState(\n//               () => {\n//                 return {name: {fname:'cuicui',lname:'si'}};\n//               },\n//               () => { // 回调函数[可选]，只有当前一个值更新了才会调用这里\n//                 console.log(this.state);\n//               }\n//             );\n//           }\n//           }\n//         >\n//           change name</button>\n//       </header>\n//     </div>\n//     );\n//   }\n// }\n// export default App;\n"],"mappings":";;;AACA,OAAOA,QAAP,MAAqB,4CAArB;AACA,OAAOC,SAAP,MAAsB,8CAAtB;AACA,OAAO,WAAP,C,CAEA;;AACA,SAASC,QAAT,QAAyB,OAAzB;;;AAEA,MAAMC,GAAG,GAAG,MAAM;EAAA;;EAChB,MAAM,CAACC,WAAD,EAAcC,aAAd,IAA+BH,QAAQ,CAAC,EAAD,CAA7C,CADgB,CACmC;;EACnD,MAAMI,cAAc,GAAIC,KAAD,IAAW;IAChC,MAAMH,WAAW,GAAGG,KAAK,CAACC,MAAN,CAAaC,KAAb,CAAmBC,iBAAnB,EAApB;EACD,CAFD;;EAGA,oBACE;IAAK,SAAS,EAAC,KAAf;IAAA,wBACE;MAAI,SAAS,EAAC,WAAd;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAEE,QAAC,SAAD;MACE,SAAS,EAAC,qBADZ;MAEE,eAAe,EAAEJ,cAFnB;MAGE,WAAW,EAAC;IAHd;MAAA;MAAA;MAAA;IAAA,QAFF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAUD,CAfD,C,CAiBA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;GA3FMH,G;;KAAAA,G;AA6FN,eAAeA,GAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}