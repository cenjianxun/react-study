{"ast":null,"code":"var _jsxFileName = \"/home/axun/React/monsters-rolodex/src/App.js\";\nimport { Component } from 'react';\nimport CardList from './components/card-list/card-list.component';\nimport SearchBox from './components/search-box/search-box.component';\nimport './App.css'; // class App extends Component {\n//   constructor(){\n//     super();\n//     this.state = {\n//       name: {fname:'Nima', lname:'xi'},\n//       company: 'ztm',\n//     };\n//   }\n//   render() {\n//     return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>Hi {this.state.name.fname} {this.state.name.lname}, I work at {this.state.company}</p>\n//         <button\n//           // 这样传递的值是异步的，所以当button被click之后，log里的值有可能还未被更新\n//           // onClick={()=>{\n//           //   this.setState({name: {fname:'cuicui',lname:'si'}})  // shallow merge 浅合并\n//           //   console.log(this.state) // 在浏览器的console里打一个log\n//           //}\n//           onClick={() => {\n//             this.setState(\n//               () => {\n//                 return {name: {fname:'cuicui',lname:'si'}};\n//               },\n//               () => { // 回调函数[可选]，只有当前一个值更新了才会调用这里\n//                 console.log(this.state);\n//               }\n//             );\n//           }\n//           }\n//         >\n//           change name</button>\n//       </header>\n//     </div>\n//     );\n//   }\n// }\n// export default App;\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  // 运行顺序：构造函数永远第一，构造函数：初始化对象\n  // 2. render 组件初始UI\n  // 3. 需要api时，就call 在mount lifecycle的组件\n  // 2. 一旦setState 被call，就rerender2\n  constructor() {\n    super();\n\n    this.onSearchChange = event => {\n      // 本来是匿名函数\n      console.log(event.target.value); //const searchString = event.target.value.toLocaleLowerCase();\n\n      const searchField = event.target.value.toLocaleLowerCase(); // filter like map, is a list,每个元素从左到右开始回调。返回一个新list\n      // const filteredMonsters = this.state.monsters.filter((monster) => {\n      //   return monster.name.toLocaleLowerCase().includes(searchString);\n      // });\n\n      this.setState(() => {\n        // return { monsters:filteredMonsters};\n        return {\n          searchField\n        };\n      });\n    };\n\n    this.state = {\n      monsters: [],\n      searchField: ''\n    };\n  } // lifecycle methods 一旦拿到数据就尽快渲染\n\n\n  componentDidMount() {\n    // 异步\n    fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json()).then(users => this.setState(() => {\n      return {\n        monsters: users\n      };\n    }));\n  }\n\n  render() {\n    const {\n      monsters,\n      searchField\n    } = this.state;\n    const {\n      onSearchChange\n    } = this;\n    const filteredMonsters = monsters.filter(monster => {\n      return monster.name.toLocaleLowerCase().includes(searchField);\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(SearchBox, {\n        className: \"search-box\",\n        onChangeHandler: onSearchChange,\n        placeholder: \"search monster\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(CardList, {\n        monsters: filteredMonsters\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"names":["Component","CardList","SearchBox","App","constructor","onSearchChange","event","console","log","target","value","searchField","toLocaleLowerCase","setState","state","monsters","componentDidMount","fetch","then","response","json","users","render","filteredMonsters","filter","monster","name","includes"],"sources":["/home/axun/React/monsters-rolodex/src/App.js"],"sourcesContent":["import { Component } from 'react';\nimport CardList from './components/card-list/card-list.component';\nimport SearchBox from './components/search-box/search-box.component';\nimport './App.css';\n\n// class App extends Component {\n//   constructor(){\n//     super();\n//     this.state = {\n//       name: {fname:'Nima', lname:'xi'},\n//       company: 'ztm',\n//     };\n//   }\n//   render() {\n//     return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>Hi {this.state.name.fname} {this.state.name.lname}, I work at {this.state.company}</p>\n//         <button\n//           // 这样传递的值是异步的，所以当button被click之后，log里的值有可能还未被更新\n//           // onClick={()=>{\n//           //   this.setState({name: {fname:'cuicui',lname:'si'}})  // shallow merge 浅合并\n//           //   console.log(this.state) // 在浏览器的console里打一个log\n//           //}\n//           onClick={() => {\n//             this.setState(\n//               () => {\n//                 return {name: {fname:'cuicui',lname:'si'}};\n//               },\n//               () => { // 回调函数[可选]，只有当前一个值更新了才会调用这里\n//                 console.log(this.state);\n//               }\n//             );\n//           }\n//           }\n//         >\n//           change name</button>\n//       </header>\n//     </div>\n//     );\n//   }\n// }\n// export default App;\n\nclass App extends Component {\n// 运行顺序：构造函数永远第一，构造函数：初始化对象\n// 2. render 组件初始UI\n// 3. 需要api时，就call 在mount lifecycle的组件\n// 2. 一旦setState 被call，就rerender2\n  constructor(){\n    super();\n    this.state = {\n      monsters: [],\n      searchField: '',\n    };\n  }\n\n  // lifecycle methods 一旦拿到数据就尽快渲染\n  componentDidMount() { // 异步\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then((response) => response.json())\n      .then((users) => \n        this.setState(\n          () => { return { monsters: users}; }\n        )\n      );\n  }\n\n  onSearchChange = (event) => { // 本来是匿名函数\n    console.log(event.target.value);\n    //const searchString = event.target.value.toLocaleLowerCase();\n    const searchField = event.target.value.toLocaleLowerCase();\n    // filter like map, is a list,每个元素从左到右开始回调。返回一个新list\n    // const filteredMonsters = this.state.monsters.filter((monster) => {\n    //   return monster.name.toLocaleLowerCase().includes(searchString);\n    // });\n    this.setState(() => {\n      // return { monsters:filteredMonsters};\n      return {searchField};\n    })\n  }\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const { onSearchChange } = this;\n\n    const filteredMonsters = monsters.filter((monster) => {\n      return monster.name.toLocaleLowerCase().includes(searchField);\n    });\n    return (\n      <div className=\"App\">\n        {/* <input \n          className='ssearch-box' \n          type='search' \n          placeholder='search monsters' \n          onChange={onSearchChange}/> */}\n          {/* {filteredMonsters.map((qiqi) => {\n          //{this.state.monsters.map((qiqi) => { //一个数组循环 .map 返回\n            return ( // key的作用是，rerender的时候，精准地找到该值局部重渲染\n              <div key={qiqi.id}> \n                <h1>{qiqi.name}</h1>\n              </div>\n              ); // 这里传入的key必须是unique\n            })\n          } */}\n            <SearchBox\n                className='search-box'\n                onChangeHandler={onSearchChange} \n                placeholder='search monster'\n            />\n            <CardList monsters={filteredMonsters}/> \n      </div>\n    );\n  }\n}\n\nexport default App;\n\n"],"mappings":";AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,QAAP,MAAqB,4CAArB;AACA,OAAOC,SAAP,MAAsB,8CAAtB;AACA,OAAO,WAAP,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAEA,MAAMC,GAAN,SAAkBH,SAAlB,CAA4B;EAC5B;EACA;EACA;EACA;EACEI,WAAW,GAAE;IACX;;IADW,KAmBbC,cAnBa,GAmBKC,KAAD,IAAW;MAAE;MAC5BC,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,MAAN,CAAaC,KAAzB,EAD0B,CAE1B;;MACA,MAAMC,WAAW,GAAGL,KAAK,CAACG,MAAN,CAAaC,KAAb,CAAmBE,iBAAnB,EAApB,CAH0B,CAI1B;MACA;MACA;MACA;;MACA,KAAKC,QAAL,CAAc,MAAM;QAClB;QACA,OAAO;UAACF;QAAD,CAAP;MACD,CAHD;IAID,CA/BY;;IAEX,KAAKG,KAAL,GAAa;MACXC,QAAQ,EAAE,EADC;MAEXJ,WAAW,EAAE;IAFF,CAAb;EAID,CAXyB,CAa1B;;;EACAK,iBAAiB,GAAG;IAAE;IACpBC,KAAK,CAAC,4CAAD,CAAL,CACGC,IADH,CACSC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADtB,EAEGF,IAFH,CAESG,KAAD,IACJ,KAAKR,QAAL,CACE,MAAM;MAAE,OAAO;QAAEE,QAAQ,EAAEM;MAAZ,CAAP;IAA4B,CADtC,CAHJ;EAOD;;EAgBDC,MAAM,GAAG;IACP,MAAM;MAAEP,QAAF;MAAYJ;IAAZ,IAA4B,KAAKG,KAAvC;IACA,MAAM;MAAET;IAAF,IAAqB,IAA3B;IAEA,MAAMkB,gBAAgB,GAAGR,QAAQ,CAACS,MAAT,CAAiBC,OAAD,IAAa;MACpD,OAAOA,OAAO,CAACC,IAAR,CAAad,iBAAb,GAAiCe,QAAjC,CAA0ChB,WAA1C,CAAP;IACD,CAFwB,CAAzB;IAGA,oBACE;MAAK,SAAS,EAAC,KAAf;MAAA,wBAeM,QAAC,SAAD;QACI,SAAS,EAAC,YADd;QAEI,eAAe,EAAEN,cAFrB;QAGI,WAAW,EAAC;MAHhB;QAAA;QAAA;QAAA;MAAA,QAfN,eAoBM,QAAC,QAAD;QAAU,QAAQ,EAAEkB;MAApB;QAAA;QAAA;QAAA;MAAA,QApBN;IAAA;MAAA;MAAA;MAAA;IAAA,QADF;EAwBD;;AArEyB;;AAwE5B,eAAepB,GAAf"},"metadata":{},"sourceType":"module"}